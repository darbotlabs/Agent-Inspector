name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
      ) &&
      (
        github.actor == 'ihrpr' ||
        github.actor == 'olaservo'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"

          # Optional: Add custom instructions for Claude to customize its behavior for your project
          custom_instructions: |
            See .github/copilot-instructions.md for detailed project guidelines.

            Key requirements:
            - Follow TypeScript patterns with proper type annotations
            - Use React functional components with hooks
            - Use Tailwind CSS for styling in client components
            - Implement proper error handling with try/catch blocks
            - Use ES modules (import/export) not CommonJS
            - Keep components small and focused on single responsibility
            - Run 'npm run build' to validate changes before committing

            Build commands:
            - npm run build (builds all)
            - npm run dev (development mode)
            - npm run test (run tests)
            - npm run prettier-fix (format code)

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
